团队记账工具项目代码

下面是基于 Flask 的团队记账 Web 应用完整项目代码，包括项目结构、主要代码文件、模板，以及依赖安装和运行说明。

项目结构

team_accounting/               # 项目根目录
├── app.py                     # Flask 应用入口
├── config.py                  # 配置文件（如 SECRET_KEY、数据库URI）
├── models.py                  # 数据模型定义（User, Tag, Expense）
├── requirements.txt           # 项目依赖列表
├── auth/                      # 身份认证功能模块
│   ├── __init__.py            # 定义 auth Blueprint
│   └── routes.py              # 注册、登录、登出路由
├── main/                      # 普通用户功能模块
│   ├── __init__.py            # 定义 main Blueprint
│   └── routes.py              # 提交申请、查看自身申请路由
├── admin/                     # 管理员功能模块
│   ├── __init__.py            # 定义 admin Blueprint
│   └── routes.py              # 审核、分类管理、统计导出路由
├── templates/                 # 前端模板
│   ├── base.html              # 基础页面框架模板
│   ├── auth/                  # auth 模块相关模板
│   │   ├── login.html         # 登录页面
│   │   └── register.html      # 注册页面
│   ├── main/                  # main 模块相关模板
│   │   ├── submit.html        # 提交报销申请页面
│   │   └── my_requests.html   # “我的申请”页面
│   └── admin/                 # admin 模块相关模板
│       ├── pending.html       # 待审核列表页面
│       ├── tags.html          # 分类及预算管理页面
│       └── stats.html         # 财务统计页面
└── static/                    # 静态文件目录（保存图表等）
    └── ...                    # 例如生成的统计图表 stats.png


依赖安装与运行说明

1. 安装依赖： 确保已安装 Python 3，使用 pip 安装所需依赖库：

创建 requirements.txt 文件内容如下：

Flask
Flask-SQLAlchemy
Flask-Login
pandas
matplotlib
openpyxl

然后运行安装：

pip install -r requirements.txt

2. 初始化数据库： 无需手动建库，首次运行应用时会自动创建 SQLite 数据库文件 team_accounting.db 并建表。

3. 运行应用： 在项目根目录下运行：

python3 app.py

应用将启动在默认的 http://127.0.0.1:5000。

4. 初始设置： 用浏览器访问应用，首次使用请先注册账户。第一个注册的用户将自动获得管理员权限（用于审批报销和管理预算分类）。管理员登录后，可进入“Manage Tags”页面添加报销分类及预算额度。

5. 提交和审核流程： 普通团队成员登录后，可在“Submit Expense”页面提交报销申请（填写金额、用途、日期并选择分类）。提交后申请状态为待审核，管理员登录后可在“Pending Requests”页面查看所有待审核申请，执行批准或拒绝操作。
	•	当管理员点击批准时，系统会校验该申请所属分类的已用金额是否未超出预算；若超过预算则无法批准【系统将提示超额】。
	•	批准后的申请状态变为已批准，写入正式账本（即数据库中状态标记为 approved）；拒绝的申请状态标记为 rejected（成员可根据需要重新提交申请）。

6. 财务统计与导出： 管理员可在“Statistics”页面查看整体财务统计：
	•	系统使用 Pandas 汇总各分类的支出并使用 Matplotlib 生成柱状图，展示每个分类的已用金额与预算对比。
	•	点击页面上的“Download CSV”或“Download Excel”按钮，可导出所有已批准报销记录的明细表（分别为 CSV 或 Excel 文件）。

以上即为完整可运行项目的代码结构和功能说明。将上述文件组织好目录结构后，按照说明安装依赖并运行应用，即可启动团队记账网站。祝使用愉快！


如果你需要外网访问，需要修改 Flask 启动方式：绑定公网 IP

默认 Flask 只监听 127.0.0.1，只能本机访问。你要让其他设备访问，需要绑定 0.0.0.0，示例如下：

# 开发模式启动 + 外网可访问
export FLASK_ENV=development
export FLASK_APP=app.py
flask run --host=0.0.0.0 --port=5000

或者直接用 Python：

python3 app.py

这需要修改代码，在你的 app.py 文件末尾添加这一行：

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


⸻

📡 补充说明：

✅ 外网访问需要满足两个前提：
	1.	你本地的 IP 是局域网中的局域地址（如 192.168.x.x）
	•	在同一 WiFi 下，手机或别的设备可直接访问你的 IP。
	2.	防火墙没有阻挡 5000 端口
	•	macOS 默认允许 localhost 服务，通常没问题；
	•	Windows 用户要检查防火墙；
	•	Linux 用户可使用 ufw allow 5000/tcp 开放端口。

⸻

🌐 测试方法：

✅ 本机测试：

curl http://127.0.0.1:5000

✅ 局域网其他设备访问：

在浏览器访问你的电脑 IP，例如：

http://192.168.1.10:5000

可以用以下命令查看 IP：

ifconfig  # mac 或 Linux
ipconfig  # Windows


⸻

🔒 如果你要部署到公网服务器：

比如放到阿里云、腾讯云，就还需要：
	•	开放云服务器防火墙的端口；
	•	使用 gunicorn + nginx 部署；
	•	设置域名和 SSL 证书（可选）。

⸻

如果你想要开发，将一个 Flask 项目上传到 GitHub 的完整流程大致分为以下几个步骤：


✅ 第一步：进入项目根目录

cd /path/to/your/project/team_accounting

✅ 第二步：初始化 Git 仓库

git init

✅ 第三步：创建 .gitignore 文件（很重要）

# .gitignore 文件内容建议如下：
__pycache__/
*.pyc
*.pyo
*.pyd
.env
myenv/
instance/
*.sqlite3
*.db
*.log
.DS_Store

你也可以使用 GitHub 提供的 Python 模板：

curl -o .gitignore https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore

✅ 第四步：添加远程 GitHub 仓库（如果还没创建，请登录 github.com → 新建一个仓库）

git remote add origin https://github.com/你的用户名/仓库名.git


✅ 第五步：提交代码

git add .
git commit -m "Initial commit: Flask team accounting tool"

✅ 第六步：推送到 GitHub（如果是新仓库，要加上 -u origin main）

git branch -M main  # 保证分支是 main（GitHub 默认）
git push -u origin main

📦 第七步：生成 requirements.txt

这一步是在你的虚拟环境中执行的：

pip freeze > requirements.txt

上传这个文件后别人可以用下面命令还原环境：

pip install -r requirements.txt


## 快速开始

```bash
# 克隆项目
git clone https://github.com/Benjaminisgood/Benony.git
cd /home/lqh

# 创建虚拟环境
python3 -m venv venv
source venv/bin/activate                                  # Windows 用 venv\Scripts\activate

# 安装依赖
pip install -r requirements.txt

# 运行项目
python app.py

export FLASK_APP=app.py
export FLASK_ENV=development
flask run

nohup python app.py > flask.log 2>&1 &

pip install gunicorn
gunicorn -w 3 -b 0.0.0.0:5000 app:app --daemon
pkill gunicorn

---

## 🔐 可选：添加 `.env` 支持（环境变量保护）

在 Flask 项目中你可能会用到数据库 URI 或 SECRET_KEY，可以写在 `.env` 文件中（并在 `.gitignore` 中忽略）：

```env
SECRET_KEY=your-secret-key
DATABASE_URL=sqlite:///team.db

然后在项目中用 python-dotenv 加载：

from dotenv import load_dotenv
load_dotenv()


⸻

✅ 完整流程复盘：

步骤	命令
初始化 Git	git init
添加远程仓库	git remote add origin ...
添加项目文件	git add .
提交	git commit -m "init"
推送到 GitHub	git push -u origin main
导出依赖	pip freeze > requirements.txt
创建 .gitignore	手动或 curl
添加 README.md	自己写说明


⸻



使用 systemd 来托管 Flask 项目是一个专业且稳健的部署方式，支持：
	•	后台运行 ✅
	•	自动重启 ✅
	•	开机自启 ✅
	•	日志集中管理 ✅

具体步骤如下：

✅ 步骤一：创建 systemd 服务文件

使用以下命令新建服务配置文件：

sudo nano /etc/systemd/system/benony.service

🔧 然后复制粘贴以下内容：

[Unit]
Description=Flask Team Accounting Service
After=network.target

[Service]
User=root
WorkingDirectory=/home/lqh
ExecStart=/home/lqh/venv/bin/python app.py
Restart=always
Environment=FLASK_ENV=production
Environment=FLASK_APP=app.py

[Install]
WantedBy=multi-user.target


⸻

✅ 步骤二：重新加载 systemd 并启动服务

# 重新加载 systemd 配置
sudo systemctl daemon-reexec
sudo systemctl daemon-reload

# 启动服务
sudo systemctl start benony.service

# 设置开机自启
sudo systemctl enable benony.service


⸻

✅ 步骤三：查看运行状态与日志

🔍 查看服务状态

sudo systemctl status benony.service

📄 查看日志输出

journalctl -u benony.service -n 100 --no-pager

也可以实时监听：

journalctl -u benony.service -f


⸻

🧯 停止 / 重启服务

sudo systemctl stop benony.service
sudo systemctl restart benony.service


⸻

⚠️ 注意事项
	1.	若你使用了 .env 文件进行配置（推荐），可用如下替代 ExecStart：

ExecStart=/bin/bash -c 'source /home/lqh/Benony/venv/bin/activate && python app.py'


	2.	若项目监听 0.0.0.0:5000，记得防火墙开放端口：

sudo ufw allow 5000

⸻

🧩 Bonus：测试是否成功

打开浏览器访问服务器 IP（公网或内网）：

http://<你的服务器IP>:5000


集中查看多个服务状态可以用通配符批量查：

systemctl list-units --type=service | grep lqh

或：

systemctl status neibr.service
journalctl -u neibr.service -n 50